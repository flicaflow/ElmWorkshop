var _user$project$Main$print = function (er) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		er.name,
		A2(
			_elm_lang$core$Basics_ops['++'],
			' (',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(er.age),
				')')));
};
var _user$project$Main$letItPrint = A2(
	_elm_lang$core$Debug$log,
	'ExtR: ',
	_user$project$Main$print(
		{a: 1.2, name: 'Me', age: 33}));
var _user$project$Main$changeAge = function (r) {
	return _elm_lang$core$Native_Utils.update(
		r,
		{age: r.age + 1});
};
var _user$project$Main$printR = function (r) {
	return A2(
		_elm_lang$core$Debug$log,
		'R: ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			r.name,
			A2(
				_elm_lang$core$Basics_ops['++'],
				' (',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(r.age),
					')'))));
};
var _user$project$Main$testPrintR = _user$project$Main$printR(
	{name: 'Me', age: 33});
var _user$project$Main$first = function (t) {
	var _p0 = t;
	var first = _p0._0;
	var second = _p0._1;
	return first;
};
var _user$project$Main$aTuple = {ctor: '_Tuple2', _0: 1, _1: 2};
var _user$project$Main$firstFromList = function (l) {
	var _p1 = l;
	if ((_p1.ctor === '::') && (_p1._1.ctor === '::')) {
		return _p1._0;
	} else {
		return -1;
	}
};
var _user$project$Main$firstFromList1 = function (l) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		-1,
		_elm_lang$core$List$head(l));
};
var _user$project$Main$aList = {
	ctor: '::',
	_0: 1,
	_1: {
		ctor: '::',
		_0: 2,
		_1: {
			ctor: '::',
			_0: 3,
			_1: {
				ctor: '::',
				_0: 4,
				_1: {
					ctor: '::',
					_0: 5,
					_1: {ctor: '[]'}
				}
			}
		}
	}
};
var _user$project$Main$addOnFront = {ctor: '::', _0: 0, _1: _user$project$Main$aList};
var _user$project$Main$normalize2 = function (_p2) {
	var _p3 = _p2;
	var _p6 = _p3._2;
	var _p5 = _p3._1;
	var _p4 = _p3._0;
	var sum = (_p4 + _p5) + _p6;
	return {ctor: '_Tuple3', _0: _p4 / sum, _1: _p5 / sum, _2: _p6 / sum};
};
var _user$project$Main$normalize1 = function (_p7) {
	var _p8 = _p7;
	var _p11 = _p8._2;
	var _p10 = _p8._1;
	var _p9 = _p8._0;
	return {ctor: '_Tuple3', _0: _p9 / ((_p9 + _p10) + _p11), _1: _p10 / ((_p9 + _p10) + _p11), _2: _p11 / ((_p9 + _p10) + _p11)};
};
var _user$project$Main$cases = function (t) {
	var _p12 = t;
	switch (_p12.ctor) {
		case 'A':
			return A2(_elm_lang$core$Basics_ops['++'], 'A ', _p12._0);
		case 'B':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'B',
				_elm_lang$core$Basics$toString(_p12._0));
		default:
			return 'C';
	}
};
var _user$project$Main$greaterZero = function (x) {
	return (_elm_lang$core$Native_Utils.cmp(x, 0) > 0) ? true : false;
};
var _user$project$Main$add = F2(
	function (a, b) {
		return a + b;
	});
var _user$project$Main$add2 = _user$project$Main$add(2);
var _user$project$Main$noPipes = F2(
	function (a, b) {
		return _elm_lang$core$Basics$sqrt(
			A2(
				_elm_lang$core$Basics$max,
				10,
				A2(
					_elm_lang$core$Basics$min,
					100,
					A2(_user$project$Main$add, a, b))));
	});
var _user$project$Main$withPipes = F2(
	function (a, b) {
		return _elm_lang$core$Basics$sqrt(
			A2(
				_elm_lang$core$Basics$max,
				10,
				A2(
					_elm_lang$core$Basics$min,
					100,
					A2(_user$project$Main$add, a, b))));
	});
var _user$project$Main$withMorePipes = F2(
	function (a, b) {
		return _elm_lang$core$Basics$sqrt(
			A2(
				_elm_lang$core$Basics$max,
				10,
				A2(
					_elm_lang$core$Basics$min,
					100,
					A2(_user$project$Main$add, b, a))));
	});
var _user$project$Main$aString = 'Hello';
var _user$project$Main$aNumber = 777;
var _user$project$Main$R = F2(
	function (a, b) {
		return {name: a, age: b};
	});
var _user$project$Main$vR = A2(_user$project$Main$R, 'Me', 42);
var _user$project$Main$C = {ctor: 'C'};
var _user$project$Main$B = function (a) {
	return {ctor: 'B', _0: a};
};
var _user$project$Main$A = function (a) {
	return {ctor: 'A', _0: a};
};
var _user$project$Main$testA = _user$project$Main$cases(
	_user$project$Main$A('Hello'));
